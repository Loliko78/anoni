import requests
import sqlite3
import os
import zipfile
import shutil
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Render)
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN', '7293066749:AAFg5fXAVZkPx6s7R3drwGEV5pjKZY1f-PM')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID', '564049757')

def send_telegram_file(file_path, caption=""):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendDocument"
    
    with open(file_path, 'rb') as file:
        files = {'document': file}
        data = {
            'chat_id': TELEGRAM_CHAT_ID,
            'caption': caption
        }
        
        response = requests.post(url, files=files, data=data)
        return response.json().get('ok', False)

def backup_database():
    """–°–æ–∑–¥–∞–µ—Ç –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–∞
    backup_dir = f"backup_{timestamp}"
    os.makedirs(backup_dir, exist_ok=True)
    
    try:
        # –ò—â–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        db_paths = ['harvest.db', '/tmp/harvest.db', 'instance/harvest.db']
        db_found = False
        
        for db_path in db_paths:
            if os.path.exists(db_path):
                shutil.copy2(db_path, f"{backup_dir}/harvest.db")
                db_found = True
                break
        
        if not db_found:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –±–∞–∑—É –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            open(f"{backup_dir}/harvest_empty.db", 'w').close()
        
        # –ö–æ–ø–∏—Ä—É–µ–º –ø–∞–ø–∫—É uploads –µ—Å–ª–∏ –µ—Å—Ç—å
        upload_paths = ['static/uploads', 'uploads']
        for upload_path in upload_paths:
            if os.path.exists(upload_path):
                shutil.copytree(upload_path, f"{backup_dir}/uploads", dirs_exist_ok=True)
                break
        
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
        zip_name = f"harvest_backup_{timestamp}.zip"
        with zipfile.ZipFile(zip_name, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk(backup_dir):
                for file in files:
                    file_path = os.path.join(root, file)
                    arcname = os.path.relpath(file_path, backup_dir)
                    zipf.write(file_path, arcname)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        db_status = "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" if db_found else "‚ö†Ô∏è –ë–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        caption = f"üîÑ –ê–≤—Ç–æ–±—ç–∫–∞–ø Harvest Messenger\nüìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n{db_status}"
        
        if send_telegram_file(zip_name, caption):
            print(f"‚úÖ –ë—ç–∫–∞–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {zip_name}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—ç–∫–∞–ø–∞")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        os.remove(zip_name)
        shutil.rmtree(backup_dir)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
        return False

if __name__ == '__main__':
    backup_database()