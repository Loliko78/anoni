#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ Tor
"""

import requests
import time
from pathlib import Path

def test_tor_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Tor"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ Tor...")
    
    # –ü–æ–ª—É—á–∞–µ–º .onion –∞–¥—Ä–µ—Å
    onion_address = None
    possible_files = [
        'harvestano_onion_address.txt',
        'harvestano_onion_service/hostname',
        'onion_address.txt'
    ]
    
    for file_path in possible_files:
        if Path(file_path).exists():
            with open(file_path, 'r') as f:
                address = f.read().strip()
                if address and '.onion' in address:
                    onion_address = address
                    break
    
    if not onion_address:
        print("‚ùå .onion –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python setup_harvestano_onion.py")
        return False
    
    print(f"üìç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å: {onion_address}")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è Tor
    proxies = {
        'http': 'socks5h://127.0.0.1:9050',
        'https': 'socks5h://127.0.0.1:9050'
    }
    
    try:
        print("‚è≥ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ Tor...")
        start_time = time.time()
        
        response = requests.get(f'http://{onion_address}', 
                              proxies=proxies, 
                              timeout=60)
        
        end_time = time.time()
        connection_time = end_time - start_time
        
        if response.status_code == 200:
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {connection_time:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"üìÑ –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response.content)} –±–∞–π—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à —Å–∞–π—Ç
            if 'harvestano' in response.text.lower() or 'login' in response.text.lower():
                print("‚úÖ –°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
            else:
                print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –Ω–∞—à —Å–∞–π—Ç")
                return True
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except requests.exceptions.ProxyError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ - Tor –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python tor_setup.py")
        return False
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ Tor –∏ —Å–µ—Ç—å")
        return False
    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç - Tor —Å–µ—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ–π")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return False

def test_external_tor():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–Ω–µ—à–Ω–∏–º .onion —Å–∞–π—Ç–∞–º"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö .onion —Å–∞–π—Ç–æ–≤...")
    
    # –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö .onion —Å–∞–π—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_sites = [
        'http://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion',  # DuckDuckGo
        'http://zqktlwiuavvvqqt4ybvgvi7tyo4hjl5xgfuvpdf6otjiycgwqbym2qad.onion'   # The Hidden Wiki
    ]
    
    proxies = {
        'http': 'socks5h://127.0.0.1:9050',
        'https': 'socks5h://127.0.0.1:9050'
    }
    
    for site in test_sites:
        try:
            print(f"‚è≥ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {site}")
            response = requests.get(site, proxies=proxies, timeout=30)
            
            if response.status_code == 200:
                print(f"‚úÖ {site} - –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"‚ö†Ô∏è {site} - HTTP {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå {site} - –æ—à–∏–±–∫–∞: {str(e)}")

def main():
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Tor –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    print("=" * 40)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—à —Å–∞–π—Ç
    success = test_tor_connection()
    
    if success:
        print("\nüéâ Tor –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("üì± Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å Tor –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. Tor –∑–∞–ø—É—â–µ–Ω: python check_tor_status.py")
        print("2. .onion –∞–¥—Ä–µ—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω: python setup_harvestano_onion.py")
        print("3. Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 10000")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å–∞–π—Ç—ã
    test_external_tor()
    
    print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    if success:
        print("‚úÖ –í–∞—à Tor —Ö–æ—Å—Ç–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("üì± –ú–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    else:
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
        print("üìñ –°–º. TOR_SETUP_INSTRUCTIONS.md –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π")

if __name__ == "__main__":
    main() 