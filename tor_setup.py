#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Tor —Å–µ—Ä–≤–µ—Ä–∞ —Å –¥–æ–º–µ–Ω–æ–º .onion
"""

import os
import subprocess
import sys
import platform
import requests
from pathlib import Path
import time

def download_tor():
    """–°–∫–∞—á–∏–≤–∞–µ–º Tor –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    system = platform.system().lower()
    arch = platform.machine().lower()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    if system == "windows":
        if "64" in arch:
            urls = [
                "https://dist.torproject.org/tor-0.4.8.10-win64.zip",
                "https://archive.torproject.org/tor-package-archive/tor-0.4.8.10-win64.zip"
            ]
        else:
            urls = [
                "https://dist.torproject.org/tor-0.4.8.10-win32.zip",
                "https://archive.torproject.org/tor-package-archive/tor-0.4.8.10-win32.zip"
            ]
    elif system == "linux":
        if "x86_64" in arch:
            urls = [
                "https://dist.torproject.org/tor-0.4.8.10-linux-x86_64.tar.gz",
                "https://archive.torproject.org/tor-package-archive/tor-0.4.8.10-linux-x86_64.tar.gz"
            ]
        else:
            urls = [
                "https://dist.torproject.org/tor-0.4.8.10-linux-i686.tar.gz",
                "https://archive.torproject.org/tor-package-archive/tor-0.4.8.10-linux-i686.tar.gz"
            ]
    elif system == "darwin":
        urls = [
            "https://dist.torproject.org/tor-0.4.8.10-osx64.tar.gz",
            "https://archive.torproject.org/tor-package-archive/tor-0.4.8.10-osx64.tar.gz"
        ]
    else:
        print(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {system} {arch}")
        return False
    
    print(f"–°–∫–∞—á–∏–≤–∞–µ–º Tor –¥–ª—è {system} {arch}...")
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ URL —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    for url in urls:
        for attempt in range(3):  # 3 –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ URL
            try:
                print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3: {url}")
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
                
                response = requests.get(url, stream=True, timeout=60, headers=headers)
                response.raise_for_status()
                
                filename = url.split('/')[-1]
                print(f"–°–∫–∞—á–∏–≤–∞–µ–º {filename}...")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                total_size = int(response.headers.get('content-length', 0))
                downloaded = 0
                
                with open(filename, 'wb') as f:
                    for chunk in response.iter_content(chunk_size=8192):
                        if chunk:
                            f.write(chunk)
                            downloaded += len(chunk)
                            if total_size > 0:
                                progress = (downloaded / total_size) * 100
                                print(f"\r–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%", end='', flush=True)
                
                print(f"\nTor —Å–∫–∞—á–∞–Ω: {filename}")
                return filename
                
            except requests.exceptions.Timeout:
                print(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                if attempt < 2:
                    print("–ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(5)
                continue
            except requests.exceptions.ConnectionError as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                if attempt < 2:
                    print("–ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(5)
                continue
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
                if attempt < 2:
                    print("–ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(5)
                continue
    
    print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å Tor –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
    return False

def check_existing_tor():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É–∂–µ Tor"""
    tor_executable = 'tor.exe' if platform.system().lower() == "windows" else './tor'
    
    if os.path.exists(tor_executable):
        print(f"Tor —É–∂–µ –Ω–∞–π–¥–µ–Ω: {tor_executable}")
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ PATH
    try:
        result = subprocess.run(['tor', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print("Tor –Ω–∞–π–¥–µ–Ω –≤ PATH")
            return True
    except:
        pass
    
    return False

def extract_tor(filename):
    """–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º Tor"""
    import zipfile
    import tarfile
    
    print(f"–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º {filename}...")
    
    try:
        if filename.endswith('.zip'):
            with zipfile.ZipFile(filename, 'r') as zip_ref:
                zip_ref.extractall('.')
        elif filename.endswith('.tar.gz'):
            with tarfile.open(filename, 'r:gz') as tar_ref:
                tar_ref.extractall('.')
        
        print("Tor —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏: {e}")
        return False

def create_tor_config():
    """–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Tor"""
    config = """# Tor –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Harvestano
SocksPort 9050
HiddenServiceDir ./tor_hidden_service
HiddenServicePort 80 127.0.0.1:10000
DataDirectory ./tor_data
Log notice file ./tor.log
"""
    
    with open('torrc', 'w') as f:
        f.write(config)
    
    print("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Tor —Å–æ–∑–¥–∞–Ω–∞: torrc")

def create_tor_directories():
    """–°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    directories = ['tor_hidden_service', 'tor_data']
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
    
    print("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Tor —Å–æ–∑–¥–∞–Ω—ã")

def get_onion_address():
    """–ü–æ–ª—É—á–∞–µ–º .onion –∞–¥—Ä–µ—Å"""
    hostname_file = Path('tor_hidden_service/hostname')
    
    if hostname_file.exists():
        with open(hostname_file, 'r') as f:
            onion_address = f.read().strip()
        print(f"Onion –∞–¥—Ä–µ—Å: {onion_address}")
        return onion_address
    else:
        print("Onion –∞–¥—Ä–µ—Å –µ—â–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Tor —Å–µ—Ä–≤–µ—Ä.")
        return None

def start_tor_server():
    """–ó–∞–ø—É—Å–∫–∞–µ–º Tor —Å–µ—Ä–≤–µ—Ä"""
    print("–ó–∞–ø—É—Å–∫–∞–µ–º Tor —Å–µ—Ä–≤–µ—Ä...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Tor –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        if platform.system().lower() == "windows":
            subprocess.Popen(['tor.exe', '-f', 'torrc'], 
                           stdout=subprocess.DEVNULL, 
                           stderr=subprocess.DEVNULL)
        else:
            subprocess.Popen(['./tor', '-f', 'torrc'], 
                           stdout=subprocess.DEVNULL, 
                           stderr=subprocess.DEVNULL)
        
        print("Tor —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
        print("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ .onion –∞–¥—Ä–µ—Å–∞...")
        
        # –ñ–¥–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞
        import time
        time.sleep(10)
        
        onion_address = get_onion_address()
        if onion_address:
            print(f"üéâ –í–∞—à —Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://{onion_address}")
            return onion_address
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Tor: {e}")
        return None

def main():
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Tor —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Harvestano")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É–∂–µ Tor
    if check_existing_tor():
        print("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Tor")
    else:
        print("Tor –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∫–∞—á–∏–≤–∞–µ–º...")
        filename = download_tor()
        if filename:
            if not extract_tor(filename):
                print("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å Tor")
                return
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å Tor")
            print("\n–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏:")
            print("1. –°–∫–∞—á–∞–π—Ç–µ Tor –≤—Ä—É—á–Ω—É—é —Å https://www.torproject.org/")
            print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑ –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã")
            print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Tor Browser")
            return
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    create_tor_config()
    create_tor_directories()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Tor —Å–µ—Ä–≤–µ—Ä
    onion_address = start_tor_server()
    
    if onion_address:
        print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 10000")
        print("2. Tor —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
        print(f"3. –í–∞—à —Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://{onion_address}")
        print("4. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Tor –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pkill tor (Linux/Mac) –∏–ª–∏ taskkill /f /im tor.exe (Windows)")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –≤ —Ñ–∞–π–ª
        with open('onion_address.txt', 'w') as f:
            f.write(onion_address)
        
        print(f"\nOnion –∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: onion_address.txt")

if __name__ == "__main__":
    main() 