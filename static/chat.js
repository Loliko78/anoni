// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentChatId = null;
let currentCallRoom = null;
let isInCall = false;
let callPartner = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initializeChat();
    initializeSocketIO();
    loadChatList();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞
function initializeChat() {
    // –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –∏–∑ URL
    const pathParts = window.location.pathname.split('/');
    currentChatId = pathParts[pathParts.length - 1];
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    const messageForm = document.getElementById('messageForm');
    const messageInput = document.getElementById('messageInput');
    
    if (messageForm) {
        messageForm.addEventListener('submit', function(e) {
            e.preventDefault();
            sendMessage();
        });
    }
    
    if (messageInput) {
        messageInput.addEventListener('input', function() {
            autoResizeTextarea(this);
        });
        
        messageInput.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤
    const fileInput = document.getElementById('fileInput');
    if (fileInput) {
        fileInput.addEventListener('change', handleFileUpload);
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–Ω–µ–ª—å —Å—Ç–∏–∫–µ—Ä–æ–≤
    initializeStickers();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    loadMessages();
    
    // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    scrollToBottom();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO
function initializeSocketIO() {
    if (typeof io !== 'undefined') {
        const socket = io();
        
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —á–∞—Ç—É
        socket.emit('join_chat', { chat_id: currentChatId });
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        socket.on('new_message', function(data) {
            if (data.chat_id == currentChatId) {
                addMessage(data);
                scrollToBottom();
                showNotification('–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', 'success');
            }
        });
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        socket.on('voice_message_received', function(data) {
            if (data.chat_id == currentChatId) {
                addVoiceMessage(data);
                showNotification('–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', 'success');
            }
        });
        
        // –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
        socket.on('incoming_call', function(data) {
            showIncomingCallModal(data);
        });
        
        // –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç
        socket.on('call_accepted', function(data) {
            handleCallAccepted(data);
        });
        
        // –ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω
        socket.on('call_rejected', function(data) {
            handleCallRejected(data);
        });
        
        // –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
        socket.on('call_ended', function(data) {
            handleCallEnded(data);
        });
        
        // –°–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞
        socket.on('call_message', function(data) {
            addCallMessage(data);
        });
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
function loadChatList() {
    fetch('/api/chats')
        .then(response => response.json())
        .then(data => {
            const chatList = document.getElementById('chatList');
            if (chatList && data.chats) {
                chatList.innerHTML = '';
                data.chats.forEach(chat => {
                    const chatItem = createChatItem(chat);
                    chatList.appendChild(chatItem);
                });
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:', error);
        });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —á–∞—Ç–∞
function createChatItem(chat) {
    const div = document.createElement('div');
    div.className = 'chat-item';
    div.onclick = () => window.location.href = `/chat/${chat.id}`;
    
    div.innerHTML = `
        <div class="chat-avatar">
            <div class="default-avatar">
                <span>${chat.other_user.nickname_enc[0].toUpperCase()}</span>
            </div>
        </div>
        <div class="chat-info">
            <div class="chat-name">${chat.other_user.nickname_enc}</div>
            <div class="chat-preview">${chat.last_message || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'}</div>
        </div>
    `;
    
    return div;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
function loadMessages() {
    if (!currentChatId) return;
    
    fetch(`/chat/${currentChatId}/messages`)
        .then(response => response.json())
        .then(data => {
            const messagesContainer = document.getElementById('chatMessages');
            if (messagesContainer && data.messages) {
                messagesContainer.innerHTML = '';
                data.messages.forEach(message => {
                    addMessage(message, false);
                });
                scrollToBottom();
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        });
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function sendMessage() {
    const messageInput = document.getElementById('messageInput');
    const content = messageInput.value.trim();
    
    if (!content) return;
    
    if (typeof io !== 'undefined') {
        const socket = io();
        socket.emit('send_message', {
            chat_id: currentChatId,
            content: content
        });
    }
    
    messageInput.value = '';
    autoResizeTextarea(messageInput);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞
function sendSticker(emoji) {
    if (typeof io !== 'undefined') {
        const socket = io();
        socket.emit('send_message', {
            chat_id: currentChatId,
            content: emoji,
            is_sticker: true
        });
    }
    
    toggleStickers();
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
function addMessage(messageData, animate = true) {
    const messagesContainer = document.getElementById('chatMessages');
    if (!messagesContainer) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    if (messageData.type === 'voice') {
        addVoiceMessage(messageData, animate);
        return;
    }
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${messageData.sender_id == currentUserId ? 'sent' : 'received'}`;
    messageDiv.dataset.messageId = messageData.id;
    
    if (animate) {
        messageDiv.style.animation = 'messageSlideIn 0.3s ease';
    }
    
    const isOwnMessage = messageData.sender_id == currentUserId;
    
    let messageHTML = '';
    
    if (!isOwnMessage) {
        messageHTML += `
            <div class="message-avatar">
                <div class="mini-avatar">
                    <span>${messageData.sender_nickname ? messageData.sender_nickname[0].toUpperCase() : 'U'}</span>
                </div>
            </div>
        `;
    }
    
    messageHTML += `
        <div class="message-content">
    `;
    
    if (messageData.file_id) {
        messageHTML += `
            <div class="message-file">
                <div class="file-preview">
                    ${messageData.file_type && messageData.file_type.startsWith('image/') 
                        ? `<img src="/file/${messageData.file_id}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" class="file-image">`
                        : '<div class="file-icon">üìé</div>'
                    }
                </div>
                <div class="file-info">
                    <div class="file-name">${messageData.file_name || '–§–∞–π–ª'}</div>
                    <a href="/file/${messageData.file_id}" class="file-download" download>–°–∫–∞—á–∞—Ç—å</a>
                </div>
            </div>
        `;
    }
    
    if (messageData.content) {
        messageHTML += `
            <div class="message-text">
                ${messageData.content}
                ${messageData.is_edited ? '<span class="edited-mark">(—Ä–µ–¥.)</span>' : ''}
            </div>
        `;
    }
    
    messageHTML += `
            <div class="message-time">${formatTime(messageData.timestamp)}</div>
        </div>
    `;
    
    if (isOwnMessage) {
        messageHTML += `
            <div class="message-actions">
                <button class="btn btn-edit" onclick="editMessage(${messageData.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                <button class="btn btn-delete" onclick="deleteMessage(${messageData.id})" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
            </div>
        `;
    }
    
    messageDiv.innerHTML = messageHTML;
    messagesContainer.appendChild(messageDiv);
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
function deleteMessage(messageId) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?')) return;
    
    fetch(`/message/delete/${messageId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const messageElement = document.querySelector(`[data-message-id="${messageId}"]`);
            if (messageElement) {
                messageElement.remove();
                showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ', 'success');
            }
        }
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
    });
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
function editMessage(messageId) {
    const messageElement = document.querySelector(`[data-message-id="${messageId}"]`);
    if (!messageElement) return;
    
    const messageText = messageElement.querySelector('.message-text');
    const currentText = messageText.textContent.replace('(—Ä–µ–¥.)', '').trim();
    
    const newText = prompt('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', currentText);
    if (newText === null || newText.trim() === '') return;
    
    fetch(`/message/edit/${messageId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ content: newText.trim() })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            messageText.innerHTML = `${newText.trim()} <span class="edited-mark">(—Ä–µ–¥.)</span>`;
            showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ', 'success');
        }
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
function handleFileUpload(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    const formData = new FormData();
    formData.append('file', file);
    
    fetch('/upload_file', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º
            if (typeof io !== 'undefined') {
                const socket = io();
                socket.emit('send_message', {
                    chat_id: currentChatId,
                    file_id: data.file_id,
                    file_name: data.file_name,
                    file_type: data.file_type
                });
            }
            showNotification('–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω', 'success');
        } else {
            showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞', 'error');
        }
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞', 'error');
    });
    
    // –û—á–∏—â–∞–µ–º input
    event.target.value = '';
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤
function initializeStickers() {
    const stickerButtons = document.querySelectorAll('.sticker');
    stickerButtons.forEach(button => {
        button.addEventListener('click', function() {
            const emoji = this.textContent;
            sendSticker(emoji);
        });
    });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤
function toggleStickers() {
    const stickersPanel = document.getElementById('stickersPanel');
    if (stickersPanel) {
        stickersPanel.style.display = stickersPanel.style.display === 'none' ? 'block' : 'none';
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ textarea
function autoResizeTextarea(textarea) {
    textarea.style.height = 'auto';
    textarea.style.height = Math.min(textarea.scrollHeight, 100) + 'px';
}

// –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
function scrollToBottom() {
    const messagesContainer = document.getElementById('chatMessages');
    if (messagesContainer) {
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
function formatTime(timestamp) {
    const date = new Date(timestamp);
    return date.toLocaleTimeString('ru-RU', { 
        hour: '2-digit', 
        minute: '2-digit' 
    });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
function toggleSidebar() {
    const sidebar = document.querySelector('.chat-sidebar');
    if (sidebar) {
        sidebar.classList.toggle('show');
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω—é —á–∞—Ç–∞
function toggleChatMenu() {
    const dropdown = document.getElementById('chatMenuDropdown');
    if (dropdown) {
        dropdown.classList.toggle('show');
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –≤—ã–ø–∞–¥–∞—é—â–∏—Ö –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
document.addEventListener('click', function(event) {
    const dropdown = document.getElementById('chatMenuDropdown');
    if (dropdown && !dropdown.contains(event.target) && !event.target.matches('.btn-menu')) {
        dropdown.classList.remove('show');
    }
    
    const stickersPanel = document.getElementById('stickersPanel');
    if (stickersPanel && !stickersPanel.contains(event.target) && !event.target.matches('.btn-sticker')) {
        stickersPanel.style.display = 'none';
    }
});

// –§—É–Ω–∫—Ü–∏–∏ –º–µ–Ω—é —á–∞—Ç–∞
function syncKeys() {
    if (!currentChatId) return;
    
    fetch(`/chat/${currentChatId}/sync_keys`, {
        method: 'POST'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showNotification('–ö–ª—é—á–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã', 'success');
        } else {
            showNotification('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª—é—á–µ–π', 'error');
        }
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª—é—á–µ–π:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª—é—á–µ–π', 'error');
    });
    
    toggleChatMenu();
}

function shareContact() {
    if (!currentChatId) return;
    
    fetch(`/chat/${currentChatId}/share_contact`, {
        method: 'POST'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showNotification('–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–¥–µ–ª–µ–Ω', 'success');
        } else {
            showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞', 'error');
        }
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞', 'error');
    });
    
    toggleChatMenu();
}

function clearHistory() {
    if (!currentChatId || !confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞?')) return;
    
    fetch(`/chat/${currentChatId}/clear_history`, {
        method: 'POST'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const messagesContainer = document.getElementById('chatMessages');
            if (messagesContainer) {
                messagesContainer.innerHTML = '';
            }
            showNotification('–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞', 'success');
        } else {
            showNotification('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏', 'error');
        }
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏', 'error');
    });
    
    toggleChatMenu();
}

function blockUser() {
    if (!currentChatId || !confirm('–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')) return;
    
    fetch(`/chat/${currentChatId}/block_user`, {
        method: 'POST'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'success');
            setTimeout(() => {
                window.location.href = '/chats';
            }, 1000);
        } else {
            showNotification('–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
        }
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        showNotification('–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
    });
    
    toggleChatMenu();
}

// –§—É–Ω–∫—Ü–∏–∏ –∑–≤–æ–Ω–∫–æ–≤
function startCall() {
    if (!currentChatId) return;
    
    // –ü–æ–ª—É—á–∞–µ–º ID –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ URL –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞
    const pathParts = window.location.pathname.split('/');
    const chatId = pathParts[pathParts.length - 1];
    
    // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ID –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
    const targetUserId = getOtherUserIdFromChat(chatId);
    
    if (targetUserId && typeof io !== 'undefined') {
        const socket = io();
        socket.emit('call_start', {
            target_user_id: targetUserId
        });
        
        showNotification('–ó–≤–æ–Ω–æ–∫ –Ω–∞—á–∞—Ç...', 'info');
    }
}

function acceptCall() {
    const modal = document.getElementById('incomingCallModal');
    const callerId = modal.dataset.callerId;
    const callRoom = modal.dataset.callRoom;
    
    if (typeof io !== 'undefined') {
        const socket = io();
        socket.emit('call_accept', {
            caller_id: callerId,
            call_room: callRoom
        });
        
        isInCall = true;
        currentCallRoom = callRoom;
        callPartner = callerId;
        
        showCallInterface();
    }
    
    hideIncomingCallModal();
}

function rejectCall() {
    const modal = document.getElementById('incomingCallModal');
    const callerId = modal.dataset.callerId;
    const callRoom = modal.dataset.callRoom;
    
    if (typeof io !== 'undefined') {
        const socket = io();
        socket.emit('call_reject', {
            caller_id: callerId,
            call_room: callRoom
        });
    }
    
    hideIncomingCallModal();
}

function endCall() {
    if (typeof io !== 'undefined') {
        const socket = io();
        socket.emit('call_end', {
            call_room: currentCallRoom,
            other_user_id: callPartner
        });
    }
    
    isInCall = false;
    currentCallRoom = null;
    callPartner = null;
    hideCallInterface();
}

function sendCallMessage() {
    const callMessageInput = document.getElementById('callMessageInput');
    const message = callMessageInput.value.trim();
    
    if (!message || !currentCallRoom) return;
    
    if (typeof io !== 'undefined') {
        const socket = io();
        socket.emit('call_message', {
            call_room: currentCallRoom,
            message: message
        });
        
        addCallMessage({
            sender_id: currentUserId,
            sender_nickname: currentUserNickname,
            message: message
        });
    }
    
    callMessageInput.value = '';
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∑–≤–æ–Ω–∫–æ–≤
function handleCallAccepted(data) {
    isInCall = true;
    callPartner = data.accepter_id;
    showCallInterface();
    showNotification('–ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç', 'success');
}

function handleCallRejected(data) {
    showNotification('–ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω', 'warning');
}

function handleCallEnded(data) {
    isInCall = false;
    currentCallRoom = null;
    callPartner = null;
    hideCallInterface();
    showNotification('–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω', 'info');
}

function addCallMessage(data) {
    const callMessagesContainer = document.getElementById('callMessages');
    if (!callMessagesContainer) return;
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `call-message ${data.sender_id == currentUserId ? 'own' : 'other'}`;
    messageDiv.innerHTML = `
        <span class="call-message-sender">${data.sender_nickname}:</span>
        <span class="call-message-text">${data.message}</span>
    `;
    
    callMessagesContainer.appendChild(messageDiv);
    callMessagesContainer.scrollTop = callMessagesContainer.scrollHeight;
}

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
function showIncomingCallModal(data) {
    const modal = document.getElementById('incomingCallModal');
    const callerName = document.getElementById('callerName');
    
    if (modal && callerName) {
        modal.dataset.callerId = data.caller_id;
        modal.dataset.callRoom = data.call_room;
        callerName.textContent = `${data.caller_nickname} –∑–≤–æ–Ω–∏—Ç –≤–∞–º`;
        modal.classList.add('show');
    }
}

function hideIncomingCallModal() {
    const modal = document.getElementById('incomingCallModal');
    if (modal) {
        modal.classList.remove('show');
    }
}

// –ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–≤–æ–Ω–∫–∞
function showCallInterface() {
    const callInterface = document.getElementById('callInterface');
    if (callInterface) {
        callInterface.style.display = 'flex';
    }
}

function hideCallInterface() {
    const callInterface = document.getElementById('callInterface');
    if (callInterface) {
        callInterface.style.display = 'none';
    }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.remove();
    }, 3000);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getOtherUserIdFromChat(chatId) {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    return null;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã
const currentUserId = document.body.dataset.userId;
const currentUserNickname = document.body.dataset.userNickname; 